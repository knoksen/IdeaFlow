name: Project Maintenance

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all dependencies'
        type: boolean
        required: false
        default: false

jobs:
  analyze:
    name: Project Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        id: outdated
        run: |
          npm outdated --json > outdated.json || true
          echo "has_outdated=true" >> $GITHUB_OUTPUT

      - name: Analyze outdated packages
        if: steps.outdated.outputs.has_outdated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            
            const categories = {
              major: [],
              minor: [],
              patch: []
            };
            
            Object.entries(outdated).forEach(([pkg, info]) => {
              const current = info.current;
              const latest = info.latest;
              
              if (!current || !latest) return;
              
              const [currentMajor, currentMinor, currentPatch] = current.split('.').map(Number);
              const [latestMajor, latestMinor, latestPatch] = latest.split('.').map(Number);
              
              if (latestMajor > currentMajor) {
                categories.major.push({ pkg, current, latest });
              } else if (latestMinor > currentMinor) {
                categories.minor.push({ pkg, current, latest });
              } else if (latestPatch > currentPatch) {
                categories.patch.push({ pkg, current, latest });
              }
            });
            
            const formatUpdates = (updates) => 
              updates.map(u => `- \`${u.pkg}\`: ${u.current} → ${u.latest}`).join('\n');
            
            const body = `## 📦 Weekly Dependencies Report
            
            ### Major Updates (Breaking Changes)
            ${categories.major.length > 0 ? formatUpdates(categories.major) : 'None'}
            
            ### Minor Updates (New Features)
            ${categories.minor.length > 0 ? formatUpdates(categories.minor) : 'None'}
            
            ### Patch Updates (Bug Fixes)
            ${categories.patch.length > 0 ? formatUpdates(categories.patch) : 'None'}
            
            ${categories.major.length > 0 ? '\n⚠️ Major updates may include breaking changes. Please review changelogs carefully.' : ''}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📦 Weekly Dependencies Report',
              body: body,
              labels: ['dependencies']
            });

      - name: Check TypeScript stats
        run: |
          echo "TypeScript Statistics:" > stats.txt
          echo "-------------------" >> stats.txt
          find . -name "*.ts" -o -name "*.tsx" | wc -l >> stats.txt
          echo "Total lines of TypeScript:" >> stats.txt
          find . -name "*.ts" -o -name "*.tsx" -exec cat {} \; | wc -l >> stats.txt

      - name: Check test coverage trends
        run: |
          npm run test -- --coverage || true
          echo "Test Coverage Trends:" >> stats.txt
          echo "-------------------" >> stats.txt
          cat coverage/coverage-summary.json >> stats.txt

      - name: Create stats issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const stats = fs.readFileSync('stats.txt', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📊 Weekly Project Statistics',
              body: '```\n' + stats + '\n```',
              labels: ['metrics']
            });

      - name: Check for unused dependencies
        run: |
          npx depcheck > depcheck.txt

      - name: Analyze dependency usage
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const depcheck = fs.readFileSync('depcheck.txt', 'utf8');
            
            if (depcheck.includes('Unused dependencies') || depcheck.includes('Unused devDependencies')) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🧹 Unused Dependencies Found',
                body: '```\n' + depcheck + '\n```',
                labels: ['dependencies', 'cleanup']
              });
            }

      - name: Update dependencies
        if: github.event.inputs.force_update == 'true'
        run: |
          npm update
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add package.json package-lock.json
          git commit -m "chore(deps): update dependencies [skip ci]" || true
          git push
